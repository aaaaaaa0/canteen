from aiogram import Bot, Router, types, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy import select, update
from datetime import time
from database.db_tabels import async_session, Order, Cart, Product, User, Menu_Section, Admin, WorkTime
from bot.keyboards import work_time_keyboard
from applications.configuration import BOT_TOKEN

import database.db_requests as rq
import bot.keyboards as kb
import asyncio
import logging


logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(name)s: %(message)s")


router = Router()
bot = Bot(token=BOT_TOKEN)


# ====================================================================
# –ö–û–ú–ê–ù–î–´
# ====================================================================


# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def cmd_start(message: Message):
    tg_id = message.from_user.id
    chat_id = message.chat.id  
    await rq.set_admin(tg_id=tg_id, chat_id=chat_id)
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π.",
        reply_markup=kb.main_keyboard
    )


# ====================================================================
# –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –ù–û–í–´–• –ó–ê–ö–ê–ó–ê–•
# ====================================================================


# –ü–æ–ª—É—á–∏—Ç—å id –∞–¥–º–∏–Ω–∞ 
async def get_admin_chat_ids() -> list[int]:
    async with async_session() as session:
        result = await session.execute(select(Admin.chat_id))
        chat_ids = [row[0] for row in result.fetchall()]
        return chat_ids


# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
async def notify_admins_about_order(order_id: int, bot: Bot):
    async with async_session() as session:
        order = await session.get(Order, order_id)
        if not order:
            return
        user = await session.get(User, order.user_id)
        if not user:
            return
        result = await session.execute(
            select(Cart)
            .where(Cart.order_id == order_id))
        cart_items = result.scalars().all()
        if not cart_items:
            return
        cold_section_result = await session.execute(
            select(Menu_Section.id)
            .where(Menu_Section.name == "–•–æ–ª–æ–¥–Ω—ã–µ –∑–∞–∫—É—Å–∫–∏"))
        cold_section_id = cold_section_result.scalar()
        cold_dishes = []
        other_dishes = []
        for item in cart_items:
            product = await session.get(Product, item.product_id)
            if not product:
                continue
            line = f"‚Ä¢ {product.name} √ó {item.quantity}"
            if product.menu_section_id == cold_section_id:
                cold_dishes.append(line)
            else:
                other_dishes.append(line)
        text = (
            f"üÜï <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n"
            f"<b>ID –∑–∞–∫–∞–∑–∞:</b>  {order.id}\n"
            f"<b>–§–ò–û:</b>  {order.name}\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b>  {order.phone}\n"
            f"<b>–ê–¥—Ä–µ—Å:</b>  {order.address}\n\n"
            f"<b>–•–æ–ª–æ–¥–Ω—ã–µ –∑–∞–∫—É—Å–∫–∏:</b>\n" + ("\n".join(cold_dishes) if cold_dishes else "‚Äî") + "\n\n"
            f"<b>–î—Ä—É–≥–∏–µ –±–ª—é–¥–∞:</b>\n" + ("\n".join(other_dishes) if other_dishes else "‚Äî") + "\n\n"
            f"<b>–í–∏–ª–∫–∏:</b>  {order.forks or 0} —à—Ç.\n"
            f"<b>–õ–æ–∂–∫–∏:</b>  {order.spoons or 0} —à—Ç."
        )
        result = await session.execute(select(Admin.tg_id))
        admin_ids = result.scalars().all()
        for admin_id in admin_ids:
            try:
                await bot.send_message(admin_id, text, parse_mode="HTML")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")


# ====================================================================
# –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–°–´–õ–ö–ò –î–õ–Ø –û–ü–õ–ê–¢–´ –ó–ê–ö–ê–ó–û–í
# ====================================================================


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
class AddCheckStates(StatesGroup):
    choosing_order_id = State()
    confirming_order = State()
    entering_check_url = State()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ [–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞]
@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞")
async def start_add_check(message: types.Message, state: FSMContext):
    async with async_session() as session:
        stmt = (
            select(Order.id, Order.name, Order.created_at, Order.total_price)
            .where(Order.checks == None)
            .order_by(Order.created_at.desc())
        )
        result = await session.execute(stmt)
        orders = result.fetchall()
        if not orders:
            await message.answer("–í—Å–µ –∑–∞–∫–∞–∑—ã —É–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —á–µ–∫.")
            return
        text = "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏:\n\n"
        for order in orders:
            order_id, name, created_at, total_price = order
            text += f"{order_id}: {name},  {created_at},  {total_price} ‚ÇΩ\n"
        await message.answer(text)
        await state.set_state(AddCheckStates.choosing_order_id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
@router.message(AddCheckStates.choosing_order_id)
async def receive_order_id(message: types.Message, state: FSMContext):
    try:
        order_id = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞.")
        return
    async with async_session() as session:
        stmt = select(Order).where(Order.id == order_id, Order.checks == None)
        result = await session.execute(stmt)
        order = result.scalar_one_or_none()
        if not order:
            await message.answer("–¢–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞ –±–µ–∑ —á–µ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        await state.update_data(order_id=order_id)
        text = (
            f"<b>ID –∑–∞–∫–∞–∑–∞:</b>  {order.id}\n\n"
            f"<b>–î–∞—Ç–∞:</b>  {order.created_at}\n"
            f"<b>–§–ò–û:</b>  {order.name}\n"
            f"<b>–¢–µ–ª:</b>  {order.phone}\n"
            f"<b>–ê–¥—Ä–µ—Å:</b>  {order.address}\n\n"
            f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b>  {order.total_price} ‚ÇΩ"
        )
        keyboard = kb.add_check_kb 
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        await state.set_state(AddCheckStates.confirming_order)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ [–î–û–ë–ê–í–ò–¢–¨ –°–°–´–õ–ö–£]
@router.callback_query(F.data == "confirm_order_check", AddCheckStates.confirming_order)
async def confirm_order(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞.")
    await state.set_state(AddCheckStates.entering_check_url)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
@router.message(AddCheckStates.entering_check_url)
async def receive_check_url(message: types.Message, state: FSMContext):
    data = await state.get_data()
    order_id = data["order_id"]
    url = message.text.strip()
    if not url.startswith("http"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å http.")
        return
    async with async_session() as session:
        stmt = select(Order).where(Order.id == order_id)
        result = await session.execute(stmt)
        order = result.scalar_one_or_none()
        if order:
            order.checks = url
            await session.commit()
            await message.answer(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–ª—è –∑–∞–∫–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n\nID –∑–∞–∫–∞–∑–∞: {order.id}")
        else:
            await message.answer("–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await state.clear()


# ====================================================================
# –£–î–ê–õ–ò–¢–¨ –°–°–´–õ–ö–ò –î–õ–Ø –û–ü–õ–ê–¢–´ –ó–ê–ö–ê–ó–û–í
# ====================================================================


# C–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
class RemoveCheckStates(StatesGroup):
    choosing_order_id = State()
    confirming_deletion = State()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ [–£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞]
@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞")
async def start_remove_check(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏.")
    await state.set_state(RemoveCheckStates.choosing_order_id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –∑–∞–∫–∞–∑–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
@router.message(RemoveCheckStates.choosing_order_id)
async def receive_order_id_for_deletion(message: types.Message, state: FSMContext):
    try:
        order_id = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞.")
        return
    async with async_session() as session:
        stmt = select(Order).where(Order.id == order_id, Order.checks != None)
        result = await session.execute(stmt)
        order = result.scalar_one_or_none()
        if not order:
            await message.answer("–¢–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Å —Å—Å—ã–ª–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        await state.update_data(order_id=order_id)
        text = (
            f"<b>ID –∑–∞–∫–∞–∑–∞:</b>  {order.id}\n\n"
            f"<b>–î–∞—Ç–∞:</b>  {order.created_at}\n"
            f"<b>–§–ò–û:</b>  {order.name}\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b>  {order.phone}\n"
            f"<b>–ê–¥—Ä–µ—Å:</b>  {order.address}\n\n"
            f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b>  {order.total_price} ‚ÇΩ\n"
            f"<b>Cc—ã–ª–∫–∞:</b>  {order.checks}\n"
        )
        keyboard = kb.del_check_kb 
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        await state.set_state(RemoveCheckStates.confirming_deletion)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ [–£–î–ê–õ–ò–¢–¨ –°–°–´–õ–ö–£]
@router.callback_query(F.data == "confirm_delete_check", RemoveCheckStates.confirming_deletion)
async def confirm_delete(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    order_id = data["order_id"]
    async with async_session() as session:
        stmt = select(Order).where(Order.id == order_id)
        result = await session.execute(stmt)
        order = result.scalar_one_or_none()
        if order:
            order.checks = None
            await session.commit()
            await callback.message.edit_reply_markup(reply_markup=None)
            await callback.message.answer(f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ —É–¥–∞–ª–µ–Ω–∞.\n\nID –∑–∞–∫–∞–∑–∞: {order.id}")
        else:
            await callback.message.answer("–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await state.clear()


# ====================================================================
# –í–†–ï–ú–Ø –ü–†–ò–Å–ú–ê –ó–ê–ö–ê–ó–û–í
# ====================================================================


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
def parse_time_string(input_str: str) -> tuple[int, int] | None:
    digits = ''.join(filter(str.isdigit, input_str))
    if len(digits) != 4:
        return None
    h, m = int(digits[:2]), int(digits[2:])
    if 0 <= h < 24 and 0 <= m < 60:
        return h, m
    return None


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
class EditWorkTime(StatesGroup):
    waiting_for_new_start = State()
    waiting_for_new_end = State()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ [–í—Ä–µ–º—è –ø—Ä–∏—ë–º–∞ –∑–∞–∫–∞–∑–æ–≤]
@router.message(F.text == "–í—Ä–µ–º—è –ø—Ä–∏—ë–º–∞ –∑–∞–∫–∞–∑–æ–≤")
async def show_work_time(message: types.Message):
    async with async_session() as session:
        result = await session.execute(select(WorkTime).where(WorkTime.id == 1))
        time_data = result.scalar_one()
        start = time_data.start.strftime("%H:%M")
        end = time_data.end.strftime("%H:%M")
        stop = time_data.stop
        stop_status = ("–ü—Ä–∏—ë–º –∑–∞–∫–∞–∑–æ–≤ –í–ö–õ–Æ–ß–Å–ù (True)\n\n–ë–æ—Ç –¥–ª—è –ø—Ä–∏—ë–º–∞ –∑–∞–∫–∞–∑–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."
                       if stop else "–ü—Ä–∏—ë–º –∑–∞–∫–∞–∑–æ–≤ –û–°–¢–ê–ù–û–í–õ–ï–ù (False)")
        await message.answer(
            f"–í—Ä–µ–º—è –ø—Ä–∏—ë–º–∞ –∑–∞–∫–∞–∑–æ–≤:\n\n"
            f"–ù–∞—á–∞–ª–æ:  {start}\n"
            f"–û–∫–æ–Ω—á–∞–Ω–∏–µ:  {end}\n"
            f"–°—Ç–æ–ø:  {stop_status}",
            reply_markup=work_time_keyboard()
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ [–ò–ó–ú–ï–ù–ò–¢–¨ –ù–ê–ß–ê–õ–û]
@router.callback_query(F.data == "change_start")
async def ask_new_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∏—ë–º–∞ –∑–∞–∫–∞–∑–æ–≤.\n\n–§–æ—Ä–º–∞—Ç: –ß–ß MM")
    await state.set_state(EditWorkTime.waiting_for_new_start)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ [–ò–ó–ú–ï–ù–ò–¢–¨ –û–ö–û–ù–ß–ê–ù–ò–ï]
@router.callback_query(F.data == "change_end")
async def ask_new_end(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∏—ë–º–∞ –∑–∞–∫–∞–∑–æ–≤.\n\n–§–æ—Ä–º–∞—Ç: –ß–ß –ú–ú")
    await state.set_state(EditWorkTime.waiting_for_new_end)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ [–í–ö–õ\–í–´–ö–õ –ü–†–ò–Å–ú –ó–ê–ö–ê–ó–û–í]
@router.callback_query(F.data == "toggle_stop")
async def toggle_stop(callback: types.CallbackQuery):
    async with async_session() as session:
        result = await session.execute(select(WorkTime).where(WorkTime.id == 1))
        time_data = result.scalar_one()
        new_stop = not time_data.stop
        time_data.stop = new_stop
        await session.commit()
        status = "–≤–∫–ª—é—á—ë–Ω" if new_stop else "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        await callback.message.answer(f"–ü—Ä–∏—ë–º –∑–∞–∫–∞–∑–æ–≤ {status.upper()}.")
    await show_work_time(callback.message)
    await callback.answer()


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –ø—Ä–∏—ë–º–∞ –∑–∞–∫–∞–∑–æ–≤
@router.message(EditWorkTime.waiting_for_new_start)
async def set_new_start(message: types.Message, state: FSMContext):
    parsed = parse_time_string(message.text)
    if not parsed:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ: 0930, 09:30, 09-30, 09 30 ‚Üí 09:30.")
        return
    h, m = parsed
    new_start = time(hour=h, minute=m)
    async with async_session() as session:
        result = await session.execute(select(WorkTime).where(WorkTime.id == 1))
        work_time = result.scalar_one_or_none()
        if not work_time:
            await message.answer("–û—à–∏–±–∫–∞: —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.")
            await state.clear()
            return
        current_end: time = work_time.end
        if not (new_start < current_end):
            await message.answer(f"–ù–µ–≤–µ—Ä–Ω–æ: –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ ({new_start.strftime('%H:%M')}) –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–¥–Ω–µ–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è ({current_end.strftime('%H:%M')}).")
            return
        await session.execute(
            update(WorkTime)
            .where(WorkTime.id == 1)
            .values(start=new_start)
            )
        await session.commit()
        await message.answer(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_start.strftime('%H:%M')}")
        await show_work_time(message)
    await state.clear()


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∏—ë–º–∞ –∑–∞–∫–∞–∑–æ–≤
@router.message(EditWorkTime.waiting_for_new_end)
async def set_new_end(message: types.Message, state: FSMContext):
    parsed = parse_time_string(message.text)
    if not parsed:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ: 1130, 11:30, 11-30, 11 30 ‚Üí 11:30.")
        return
    h, m = parsed
    new_end = time(hour=h, minute=m)
    async with async_session() as session:
        result = await session.execute(select(WorkTime).where(WorkTime.id == 1))
        work_time = result.scalar_one_or_none()
        if not work_time:
            await message.answer("–û—à–∏–±–∫–∞: —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.")
            await state.clear()
            return
        current_start: time = work_time.start
        if not (current_start < new_end):
            await message.answer(f"–ù–µ–≤–µ—Ä–Ω–æ: –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è ({new_end.strftime('%H:%M')}) –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª–∞ ({current_start.strftime('%H:%M')}).")
            return
        await session.execute(
            update(WorkTime)
            .where(WorkTime.id == 1)
            .values(end=new_end)
            )
        await session.commit()
        await message.answer(f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_end.strftime('%H:%M')}")
        await show_work_time(message)
    await state.clear()


# ====================================================================
# –û–¢–ü–†–ê–í–ö–ê –°–°–´–õ–ö–ò –ù–ê –û–ü–õ–ê–¢–£
# ====================================================================


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
class NotifyStates(StatesGroup):
    waiting_for_order_id = State()
    confirming = State()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ [–£–≤–µ–¥–æ–º–∏—Ç—å –æ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã]
@router.message(F.text== "–£–≤–µ–¥–æ–º–∏—Ç—å –æ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã")
async def start_notify(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞:")
    await state.set_state(NotifyStates.waiting_for_order_id)


# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∑–∞–∫–∞–∑–∞
@router.message(NotifyStates.waiting_for_order_id)
async def receive_order_id(message: types.Message, state: FSMContext):
    try:
        order_id = int(message.text.strip())
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –∑–∞–∫–∞–∑–∞.")
        return
    async with async_session() as session:
        stmt = select(Order).where(Order.id == order_id)
        result = await session.execute(stmt)
        order = result.scalar_one_or_none()
        if not order:
            await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        await state.update_data(order_id=order_id)
        info = (
            f"<b>ID –∑–∞–∫–∞–∑–∞:</b>  {order.id}\n\n"
            f"<b>–§–ò–û:</b>  {order.name}\n"
            f"<b>–¢–µ–ª:</b>  {order.phone}\n"
            f"<b>–ê–¥—Ä–µ—Å:</b>  {order.address}\n\n"
            f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b>  {order.total_price} —Ä.\n"
            f"<b>–°—Å—ã–ª–∫–∞:</b>  {order.checks or '–Ω–µ—Ç'}"
        )
        keyboard = kb.notify_check_kb
        await message.answer(info,  parse_mode="HTML",reply_markup=keyboard)
        await state.set_state(NotifyStates.confirming)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@router.callback_query(F.data == "confirm_notify", NotifyStates.confirming)
async def confirm_notify(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    data = await state.get_data()
    order_id = data.get("order_id")
    async with async_session() as session:
        await session.execute(
            update(Order)
            .where(Order.id == order_id)
            .values(notification=True)
            )
        await session.commit()
    await callback.message.answer(f"–°c—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.\n\nID –∑–∞–∫–∞–∑–∞: {order_id}.")
    await state.clear()
    asyncio.create_task(reset_notification_after_delay(order_id))


# –°–±—Ä–æ—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
async def reset_notification_after_delay(order_id: int):
    await asyncio.sleep(60)
    async with async_session() as session:
        await session.execute(
            update(Order)
            .where(Order.id == order_id).values(notification=False)
            )
        await session.commit()




