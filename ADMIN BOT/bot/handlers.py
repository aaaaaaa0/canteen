from aiogram import Bot, Router
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy import select
from database.db_tabels import async_session, Order, Cart, Product, User, Menu_Section, Admin
import database.db_requests as rq
import bot.keyboards as kb
import logging

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(name)s: %(message)s")

router = Router()


# ====================================================================
# COMMANDS
# ====================================================================

@router.message(Command("start"))
async def cmd_start(message: Message):
    tg_id = message.from_user.id
    chat_id = message.chat.id  

    await rq.set_admin(tg_id=tg_id, chat_id=chat_id)
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π.",
        reply_markup=kb.main_keyboard
    )




# ====================================================================
# HANDLERS
# ====================================================================
async def get_admin_chat_ids() -> list[int]:
    async with async_session() as session:
        result = await session.execute(select(Admin.chat_id))
        chat_ids = [row[0] for row in result.fetchall()]
        return chat_ids

# –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê–ú –û –ù–û–í–û–ú –ó–ê–ö–ê–ó–ï
async def notify_admins_about_order(order_id: int, bot: Bot):
    async with async_session() as session:
        order = await session.get(Order, order_id)
        if not order:
            return

        user = await session.get(User, order.user_id)
        if not user:
            return

        result = await session.execute(
            select(Cart).where(Cart.order_id == order_id)
        )
        cart_items = result.scalars().all()
        if not cart_items:
            return

        cold_section_result = await session.execute(
            select(Menu_Section.id).where(Menu_Section.name == "–•–æ–ª–æ–¥–Ω—ã–µ –∑–∞–∫—É—Å–∫–∏")
        )
        cold_section_id = cold_section_result.scalar()

        cold_dishes = []
        other_dishes = []

        for item in cart_items:
            product = await session.get(Product, item.product_id)
            if not product:
                continue

            line = f"‚Ä¢ {product.name} √ó {item.quantity}"

            if product.menu_section_id == cold_section_id:
                cold_dishes.append(line)
            else:
                other_dishes.append(line)

        text = (
            f"üÜï <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n"
            f"<b>–§–ò–û:</b> {order.name or user.name}\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.phone or user.phone}\n"
            f"<b>–ê–¥—Ä–µ—Å:</b> {order.address or user.address}\n\n"
            f"<b>–•–æ–ª–æ–¥–Ω—ã–µ –∑–∞–∫—É—Å–∫–∏:</b>\n" + ("\n".join(cold_dishes) if cold_dishes else "‚Äî") + "\n\n"
            f"<b>–î—Ä—É–≥–∏–µ –±–ª—é–¥–∞:</b>\n" + ("\n".join(other_dishes) if other_dishes else "‚Äî") + "\n\n"
            f"<b>–í–∏–ª–∫–∏:</b> {order.forks or 0} —à—Ç.\n"
            f"<b>–õ–æ–∂–∫–∏:</b> {order.spoons or 0} —à—Ç."
        )

        result = await session.execute(select(Admin.tg_id))
        admin_ids = result.scalars().all()

        for admin_id in admin_ids:
            try:
                await bot.send_message(admin_id, text, parse_mode="HTML")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
